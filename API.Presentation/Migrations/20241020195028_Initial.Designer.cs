// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Infrastructure;

#nullable disable

namespace API.Presentation.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20241020195028_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Domain.Auth.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserAPIKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Entities.Domain.Google.AccessibilityOptions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("WheelchairAccessibleEntrance")
                        .HasColumnType("bit");

                    b.Property<bool?>("WheelchairAccessibleParking")
                        .HasColumnType("bit");

                    b.Property<bool>("WheelchairAccessibleRestroom")
                        .HasColumnType("bit");

                    b.Property<bool>("WheelchairAccessibleSeating")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId")
                        .IsUnique()
                        .HasFilter("[PlaceId] IS NOT NULL");

                    b.ToTable("AccessibilityOptions");
                });

            modelBuilder.Entity("Entities.Domain.Google.AddressComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Types")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("AddressComponent");
                });

            modelBuilder.Entity("Entities.Domain.Google.AddressDescriptor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId")
                        .IsUnique()
                        .HasFilter("[PlaceId] IS NOT NULL");

                    b.ToTable("AddressDescriptor");
                });

            modelBuilder.Entity("Entities.Domain.Google.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressDescriptorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Containment")
                        .HasColumnType("int");

                    b.Property<Guid?>("DisplayNameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressDescriptorId");

                    b.HasIndex("DisplayNameId")
                        .IsUnique()
                        .HasFilter("[DisplayNameId] IS NOT NULL");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("Entities.Domain.Google.AuthorAttribution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PhotoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhotoUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId");

                    b.ToTable("AuthorAttribution");
                });

            modelBuilder.Entity("Entities.Domain.Google.Circle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Radius")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CenterId")
                        .IsUnique()
                        .HasFilter("[CenterId] IS NOT NULL");

                    b.ToTable("Circle");
                });

            modelBuilder.Entity("Entities.Domain.Google.Close", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Day")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour")
                        .HasColumnType("bigint");

                    b.Property<long>("Minute")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DateId");

                    b.ToTable("Close");
                });

            modelBuilder.Entity("Entities.Domain.Google.CurrentOpeningHours", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("OpenNow")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PlaceCurrentSecondaryOpeningHoursId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlaceRegularSecondaryOpeningHoursId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SecondaryHoursType")
                        .HasColumnType("int");

                    b.Property<string>("WeekdayDescriptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlaceCurrentSecondaryOpeningHoursId");

                    b.HasIndex("PlaceRegularSecondaryOpeningHoursId");

                    b.ToTable("CurrentOpeningHours");
                });

            modelBuilder.Entity("Entities.Domain.Google.Date", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Day")
                        .HasColumnType("bigint");

                    b.Property<long>("Month")
                        .HasColumnType("bigint");

                    b.Property<long>("Year")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Date");
                });

            modelBuilder.Entity("Entities.Domain.Google.DisplayName", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DisplayName");
                });

            modelBuilder.Entity("Entities.Domain.Google.GenerativeSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OverviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReferencesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionId")
                        .IsUnique()
                        .HasFilter("[DescriptionId] IS NOT NULL");

                    b.HasIndex("OverviewId")
                        .IsUnique();

                    b.HasIndex("PlaceId")
                        .IsUnique()
                        .HasFilter("[PlaceId] IS NOT NULL");

                    b.HasIndex("ReferencesId");

                    b.ToTable("GenerativeSummary");
                });

            modelBuilder.Entity("Entities.Domain.Google.Landmark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressDescriptorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DisplayNameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpatialRelationship")
                        .HasColumnType("int");

                    b.Property<double>("StraightLineDistanceMeters")
                        .HasColumnType("float");

                    b.Property<double?>("TravelDistanceMeters")
                        .HasColumnType("float");

                    b.Property<string>("Types")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressDescriptorId");

                    b.HasIndex("DisplayNameId")
                        .IsUnique()
                        .HasFilter("[DisplayNameId] IS NOT NULL");

                    b.ToTable("Landmark");
                });

            modelBuilder.Entity("Entities.Domain.Google.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<Guid?>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId")
                        .IsUnique()
                        .HasFilter("[PlaceId] IS NOT NULL");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Entities.Domain.Google.ParkingOptions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("FreeGarageParking")
                        .HasColumnType("bit");

                    b.Property<bool?>("FreeStreetParking")
                        .HasColumnType("bit");

                    b.Property<bool?>("PaidGarageParking")
                        .HasColumnType("bit");

                    b.Property<bool?>("PaidParkingLot")
                        .HasColumnType("bit");

                    b.Property<bool?>("PaidStreetParking")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("ValetParking")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId")
                        .IsUnique()
                        .HasFilter("[PlaceId] IS NOT NULL");

                    b.ToTable("ParkingOptions");
                });

            modelBuilder.Entity("Entities.Domain.Google.PaymentOptions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AcceptsCashOnly")
                        .HasColumnType("bit");

                    b.Property<bool>("AcceptsCreditCards")
                        .HasColumnType("bit");

                    b.Property<bool>("AcceptsDebitCards")
                        .HasColumnType("bit");

                    b.Property<bool?>("AcceptsNfc")
                        .HasColumnType("bit");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId")
                        .IsUnique();

                    b.ToTable("PaymentOptions");
                });

            modelBuilder.Entity("Entities.Domain.Google.Period", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CloseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrentOpeningHoursId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OpenId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CloseId")
                        .IsUnique()
                        .HasFilter("[CloseId] IS NOT NULL");

                    b.HasIndex("CurrentOpeningHoursId");

                    b.HasIndex("OpenId")
                        .IsUnique()
                        .HasFilter("[OpenId] IS NOT NULL");

                    b.ToTable("Period");
                });

            modelBuilder.Entity("Entities.Domain.Google.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("HeightPx")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("WidthPx")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("Entities.Domain.Google.Place", b =>
                {
                    b.Property<Guid>("PlaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdrFormatAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("AllowsDogs")
                        .HasColumnType("bit");

                    b.Property<int>("BusinessStatus")
                        .HasColumnType("int");

                    b.Property<bool?>("CurbsidePickup")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CurrentOpeningHoursId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Delivery")
                        .HasColumnType("bit");

                    b.Property<bool>("DineIn")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DisplayNameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EditorialSummaryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FormattedAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("GoodForChildren")
                        .HasColumnType("bit");

                    b.Property<bool>("GoodForGroups")
                        .HasColumnType("bit");

                    b.Property<bool>("GoodForWatchingSports")
                        .HasColumnType("bit");

                    b.Property<string>("GoogleMapsUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconBackgroundColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconMaskBaseUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternationalPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LiveMusic")
                        .HasColumnType("bit");

                    b.Property<bool>("MenuForChildren")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OutdoorSeating")
                        .HasColumnType("bit");

                    b.Property<int>("PriceLevel")
                        .HasColumnType("int");

                    b.Property<string>("PrimaryType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PrimaryTypeDisplayNameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<Guid>("RegularOpeningHoursId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Reservable")
                        .HasColumnType("bit");

                    b.Property<bool>("Restroom")
                        .HasColumnType("bit");

                    b.Property<bool>("ServesBeer")
                        .HasColumnType("bit");

                    b.Property<bool?>("ServesBreakfast")
                        .HasColumnType("bit");

                    b.Property<bool?>("ServesBrunch")
                        .HasColumnType("bit");

                    b.Property<bool>("ServesCocktails")
                        .HasColumnType("bit");

                    b.Property<bool>("ServesCoffee")
                        .HasColumnType("bit");

                    b.Property<bool>("ServesDessert")
                        .HasColumnType("bit");

                    b.Property<bool>("ServesDinner")
                        .HasColumnType("bit");

                    b.Property<bool>("ServesLunch")
                        .HasColumnType("bit");

                    b.Property<bool?>("ServesVegetarianFood")
                        .HasColumnType("bit");

                    b.Property<bool>("ServesWine")
                        .HasColumnType("bit");

                    b.Property<string>("ShortFormattedAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Takeout")
                        .HasColumnType("bit");

                    b.Property<string>("Types")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("UserRatingCount")
                        .HasColumnType("bigint");

                    b.Property<long>("UtcOffsetMinutes")
                        .HasColumnType("bigint");

                    b.Property<string>("WebsiteUri")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlaceId");

                    b.HasIndex("CurrentOpeningHoursId")
                        .IsUnique()
                        .HasFilter("[CurrentOpeningHoursId] IS NOT NULL");

                    b.HasIndex("DisplayNameId")
                        .IsUnique()
                        .HasFilter("[DisplayNameId] IS NOT NULL");

                    b.HasIndex("EditorialSummaryId")
                        .IsUnique()
                        .HasFilter("[EditorialSummaryId] IS NOT NULL");

                    b.HasIndex("PrimaryTypeDisplayNameId")
                        .IsUnique()
                        .HasFilter("[PrimaryTypeDisplayNameId] IS NOT NULL");

                    b.HasIndex("RegularOpeningHoursId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("Entities.Domain.Google.PlusCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompoundCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GlobalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId")
                        .IsUnique()
                        .HasFilter("[PlaceId] IS NOT NULL");

                    b.ToTable("PlusCode");
                });

            modelBuilder.Entity("Entities.Domain.Google.References", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("References");
                });

            modelBuilder.Entity("Entities.Domain.Google.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorAttributionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OriginalTextId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("PublishTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("Rating")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ReferencesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RelativePublishTimeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TextId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AuthorAttributionId")
                        .IsUnique()
                        .HasFilter("[AuthorAttributionId] IS NOT NULL");

                    b.HasIndex("OriginalTextId")
                        .IsUnique()
                        .HasFilter("[OriginalTextId] IS NOT NULL");

                    b.HasIndex("PlaceId");

                    b.HasIndex("ReferencesId");

                    b.HasIndex("TextId")
                        .IsUnique()
                        .HasFilter("[TextId] IS NOT NULL");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("Entities.Domain.Google.Viewport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HighId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HighId")
                        .IsUnique()
                        .HasFilter("[HighId] IS NOT NULL");

                    b.HasIndex("LowId")
                        .IsUnique()
                        .HasFilter("[LowId] IS NOT NULL");

                    b.HasIndex("PlaceId")
                        .IsUnique()
                        .HasFilter("[PlaceId] IS NOT NULL");

                    b.ToTable("Viewport");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d2054337-64af-437d-99cc-ec53dc25d127",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Domain.Google.AccessibilityOptions", b =>
                {
                    b.HasOne("Entities.Domain.Google.Place", null)
                        .WithOne("AccessibilityOptions")
                        .HasForeignKey("Entities.Domain.Google.AccessibilityOptions", "PlaceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Entities.Domain.Google.AddressComponent", b =>
                {
                    b.HasOne("Entities.Domain.Google.Place", null)
                        .WithMany("AddressComponents")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Entities.Domain.Google.AddressDescriptor", b =>
                {
                    b.HasOne("Entities.Domain.Google.Place", null)
                        .WithOne("AddressDescriptor")
                        .HasForeignKey("Entities.Domain.Google.AddressDescriptor", "PlaceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Entities.Domain.Google.Area", b =>
                {
                    b.HasOne("Entities.Domain.Google.AddressDescriptor", null)
                        .WithMany("Areas")
                        .HasForeignKey("AddressDescriptorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.Domain.Google.DisplayName", "DisplayName")
                        .WithOne()
                        .HasForeignKey("Entities.Domain.Google.Area", "DisplayNameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DisplayName");
                });

            modelBuilder.Entity("Entities.Domain.Google.AuthorAttribution", b =>
                {
                    b.HasOne("Entities.Domain.Google.Photo", null)
                        .WithMany("AuthorAttributions")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Entities.Domain.Google.Circle", b =>
                {
                    b.HasOne("Entities.Domain.Google.Location", "Center")
                        .WithOne()
                        .HasForeignKey("Entities.Domain.Google.Circle", "CenterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Center");
                });

            modelBuilder.Entity("Entities.Domain.Google.Close", b =>
                {
                    b.HasOne("Entities.Domain.Google.Date", "Date")
                        .WithMany()
                        .HasForeignKey("DateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Date");
                });

            modelBuilder.Entity("Entities.Domain.Google.CurrentOpeningHours", b =>
                {
                    b.HasOne("Entities.Domain.Google.Place", null)
                        .WithMany("CurrentSecondaryOpeningHours")
                        .HasForeignKey("PlaceCurrentSecondaryOpeningHoursId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.Domain.Google.Place", null)
                        .WithMany("RegularSecondaryOpeningHours")
                        .HasForeignKey("PlaceRegularSecondaryOpeningHoursId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Entities.Domain.Google.GenerativeSummary", b =>
                {
                    b.HasOne("Entities.Domain.Google.DisplayName", "Description")
                        .WithOne()
                        .HasForeignKey("Entities.Domain.Google.GenerativeSummary", "DescriptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.Domain.Google.DisplayName", "Overview")
                        .WithOne()
                        .HasForeignKey("Entities.Domain.Google.GenerativeSummary", "OverviewId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Domain.Google.Place", null)
                        .WithOne("GenerativeSummary")
                        .HasForeignKey("Entities.Domain.Google.GenerativeSummary", "PlaceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.Domain.Google.References", "References")
                        .WithMany()
                        .HasForeignKey("ReferencesId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Description");

                    b.Navigation("Overview");

                    b.Navigation("References");
                });

            modelBuilder.Entity("Entities.Domain.Google.Landmark", b =>
                {
                    b.HasOne("Entities.Domain.Google.AddressDescriptor", null)
                        .WithMany("Landmarks")
                        .HasForeignKey("AddressDescriptorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.Domain.Google.DisplayName", "DisplayName")
                        .WithOne()
                        .HasForeignKey("Entities.Domain.Google.Landmark", "DisplayNameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DisplayName");
                });

            modelBuilder.Entity("Entities.Domain.Google.Location", b =>
                {
                    b.HasOne("Entities.Domain.Google.Place", null)
                        .WithOne("Location")
                        .HasForeignKey("Entities.Domain.Google.Location", "PlaceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Entities.Domain.Google.ParkingOptions", b =>
                {
                    b.HasOne("Entities.Domain.Google.Place", null)
                        .WithOne("ParkingOptions")
                        .HasForeignKey("Entities.Domain.Google.ParkingOptions", "PlaceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Entities.Domain.Google.PaymentOptions", b =>
                {
                    b.HasOne("Entities.Domain.Google.Place", null)
                        .WithOne("PaymentOptions")
                        .HasForeignKey("Entities.Domain.Google.PaymentOptions", "PlaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Domain.Google.Period", b =>
                {
                    b.HasOne("Entities.Domain.Google.Close", "Close")
                        .WithOne()
                        .HasForeignKey("Entities.Domain.Google.Period", "CloseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.Domain.Google.CurrentOpeningHours", null)
                        .WithMany("Periods")
                        .HasForeignKey("CurrentOpeningHoursId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Domain.Google.Close", "Open")
                        .WithOne()
                        .HasForeignKey("Entities.Domain.Google.Period", "OpenId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Close");

                    b.Navigation("Open");
                });

            modelBuilder.Entity("Entities.Domain.Google.Photo", b =>
                {
                    b.HasOne("Entities.Domain.Google.Place", null)
                        .WithMany("Photos")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Entities.Domain.Google.Place", b =>
                {
                    b.HasOne("Entities.Domain.Google.CurrentOpeningHours", "CurrentOpeningHours")
                        .WithOne()
                        .HasForeignKey("Entities.Domain.Google.Place", "CurrentOpeningHoursId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.Domain.Google.DisplayName", "DisplayName")
                        .WithOne()
                        .HasForeignKey("Entities.Domain.Google.Place", "DisplayNameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.Domain.Google.DisplayName", "EditorialSummary")
                        .WithOne()
                        .HasForeignKey("Entities.Domain.Google.Place", "EditorialSummaryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.Domain.Google.DisplayName", "PrimaryTypeDisplayName")
                        .WithOne()
                        .HasForeignKey("Entities.Domain.Google.Place", "PrimaryTypeDisplayNameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.Domain.Google.CurrentOpeningHours", "RegularOpeningHours")
                        .WithOne()
                        .HasForeignKey("Entities.Domain.Google.Place", "RegularOpeningHoursId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Domain.Auth.User", null)
                        .WithMany("FavoritePlaces")
                        .HasForeignKey("UserId");

                    b.Navigation("CurrentOpeningHours");

                    b.Navigation("DisplayName");

                    b.Navigation("EditorialSummary");

                    b.Navigation("PrimaryTypeDisplayName");

                    b.Navigation("RegularOpeningHours");
                });

            modelBuilder.Entity("Entities.Domain.Google.PlusCode", b =>
                {
                    b.HasOne("Entities.Domain.Google.Place", null)
                        .WithOne("PlusCode")
                        .HasForeignKey("Entities.Domain.Google.PlusCode", "PlaceId");
                });

            modelBuilder.Entity("Entities.Domain.Google.Review", b =>
                {
                    b.HasOne("Entities.Domain.Google.AuthorAttribution", "AuthorAttribution")
                        .WithOne()
                        .HasForeignKey("Entities.Domain.Google.Review", "AuthorAttributionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.Domain.Google.DisplayName", "OriginalText")
                        .WithOne()
                        .HasForeignKey("Entities.Domain.Google.Review", "OriginalTextId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.Domain.Google.Place", null)
                        .WithMany("Reviews")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.Domain.Google.References", null)
                        .WithMany("Reviews")
                        .HasForeignKey("ReferencesId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.Domain.Google.DisplayName", "Text")
                        .WithOne()
                        .HasForeignKey("Entities.Domain.Google.Review", "TextId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AuthorAttribution");

                    b.Navigation("OriginalText");

                    b.Navigation("Text");
                });

            modelBuilder.Entity("Entities.Domain.Google.Viewport", b =>
                {
                    b.HasOne("Entities.Domain.Google.Location", "High")
                        .WithOne()
                        .HasForeignKey("Entities.Domain.Google.Viewport", "HighId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.Domain.Google.Location", "Low")
                        .WithOne()
                        .HasForeignKey("Entities.Domain.Google.Viewport", "LowId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.Domain.Google.Place", null)
                        .WithOne("Viewport")
                        .HasForeignKey("Entities.Domain.Google.Viewport", "PlaceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("High");

                    b.Navigation("Low");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Domain.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Domain.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Domain.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Domain.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Domain.Auth.User", b =>
                {
                    b.Navigation("FavoritePlaces");
                });

            modelBuilder.Entity("Entities.Domain.Google.AddressDescriptor", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("Landmarks");
                });

            modelBuilder.Entity("Entities.Domain.Google.CurrentOpeningHours", b =>
                {
                    b.Navigation("Periods");
                });

            modelBuilder.Entity("Entities.Domain.Google.Photo", b =>
                {
                    b.Navigation("AuthorAttributions");
                });

            modelBuilder.Entity("Entities.Domain.Google.Place", b =>
                {
                    b.Navigation("AccessibilityOptions")
                        .IsRequired();

                    b.Navigation("AddressComponents");

                    b.Navigation("AddressDescriptor")
                        .IsRequired();

                    b.Navigation("CurrentSecondaryOpeningHours");

                    b.Navigation("GenerativeSummary")
                        .IsRequired();

                    b.Navigation("Location")
                        .IsRequired();

                    b.Navigation("ParkingOptions")
                        .IsRequired();

                    b.Navigation("PaymentOptions")
                        .IsRequired();

                    b.Navigation("Photos");

                    b.Navigation("PlusCode")
                        .IsRequired();

                    b.Navigation("RegularSecondaryOpeningHours");

                    b.Navigation("Reviews");

                    b.Navigation("Viewport")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Domain.Google.References", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
