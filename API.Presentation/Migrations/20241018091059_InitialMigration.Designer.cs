// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Infrastructure;

#nullable disable

namespace API.Presentation.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20241018091059_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Domain.Auth.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserAPIKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Entities.Domain.Google.AccessibilityOptions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("WheelchairAccessibleEntrance")
                        .HasColumnType("bit");

                    b.Property<bool?>("WheelchairAccessibleParking")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("AccessibilityOptions");
                });

            modelBuilder.Entity("Entities.Domain.Google.AddressComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LongName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Types")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("AddressComponent");
                });

            modelBuilder.Entity("Entities.Domain.Google.AddressDescriptor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descriptor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AddressDescriptor");
                });

            modelBuilder.Entity("Entities.Domain.Google.AreaSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AreaSummary");
                });

            modelBuilder.Entity("Entities.Domain.Google.Attribution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Attribution");
                });

            modelBuilder.Entity("Entities.Domain.Google.EVChargeOptions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("FastCharge")
                        .HasColumnType("bit");

                    b.Property<bool?>("RegularCharge")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("EVChargeOptions");
                });

            modelBuilder.Entity("Entities.Domain.Google.FuelOptions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Diesel")
                        .HasColumnType("bit");

                    b.Property<bool?>("Petrol")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("FuelOptions");
                });

            modelBuilder.Entity("Entities.Domain.Google.GenerativeSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GeneratedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GenerativeSummary");
                });

            modelBuilder.Entity("Entities.Domain.Google.LatLng", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("LatLng");
                });

            modelBuilder.Entity("Entities.Domain.Google.LocalizedText", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LocalizedText");
                });

            modelBuilder.Entity("Entities.Domain.Google.OpeningHours", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CurrentSecondaryOpeningHoursId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("OpenNow")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RegularSecondaryOpeningHoursId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WeekdayText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentSecondaryOpeningHoursId");

                    b.HasIndex("RegularSecondaryOpeningHoursId");

                    b.ToTable("OpeningHours");
                });

            modelBuilder.Entity("Entities.Domain.Google.ParkingOptions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("GarageParking")
                        .HasColumnType("bit");

                    b.Property<bool?>("StreetParking")
                        .HasColumnType("bit");

                    b.Property<bool?>("ValetParking")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ParkingOptions");
                });

            modelBuilder.Entity("Entities.Domain.Google.PaymentOptions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("CreditCard")
                        .HasColumnType("bit");

                    b.Property<bool?>("DebitCard")
                        .HasColumnType("bit");

                    b.Property<bool?>("MobilePayment")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("PaymentOptions");
                });

            modelBuilder.Entity("Entities.Domain.Google.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("HtmlAttributions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("Entities.Domain.Google.Place", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressDescriptorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdrFormatAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("AllowsDogs")
                        .HasColumnType("bit");

                    b.Property<int?>("BusinessStatus")
                        .HasColumnType("int");

                    b.Property<bool?>("CurbsidePickup")
                        .HasColumnType("bit");

                    b.Property<Guid>("CurrentOpeningHoursId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Delivery")
                        .HasColumnType("bit");

                    b.Property<bool?>("DineIn")
                        .HasColumnType("bit");

                    b.Property<Guid>("EditorialSummaryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FormattedAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("GoodForChildren")
                        .HasColumnType("bit");

                    b.Property<bool?>("GoodForGroups")
                        .HasColumnType("bit");

                    b.Property<bool?>("GoodForWatchingSports")
                        .HasColumnType("bit");

                    b.Property<string>("GoogleMapsUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconBackgroundColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconMaskBaseUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternationalPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("LiveMusic")
                        .HasColumnType("bit");

                    b.Property<bool?>("MenuForChildren")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("OutdoorSeating")
                        .HasColumnType("bit");

                    b.Property<int?>("PriceLevel")
                        .HasColumnType("int");

                    b.Property<string>("PrimaryType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PrimaryTypeDisplayNameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<Guid>("RegularOpeningHoursId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Reservable")
                        .HasColumnType("bit");

                    b.Property<bool?>("Restroom")
                        .HasColumnType("bit");

                    b.Property<bool?>("ServesBeer")
                        .HasColumnType("bit");

                    b.Property<bool?>("ServesBreakfast")
                        .HasColumnType("bit");

                    b.Property<bool?>("ServesBrunch")
                        .HasColumnType("bit");

                    b.Property<bool?>("ServesCocktails")
                        .HasColumnType("bit");

                    b.Property<bool?>("ServesCoffee")
                        .HasColumnType("bit");

                    b.Property<bool?>("ServesDessert")
                        .HasColumnType("bit");

                    b.Property<bool?>("ServesDinner")
                        .HasColumnType("bit");

                    b.Property<bool?>("ServesLunch")
                        .HasColumnType("bit");

                    b.Property<bool?>("ServesVegetarianFood")
                        .HasColumnType("bit");

                    b.Property<bool?>("ServesWine")
                        .HasColumnType("bit");

                    b.Property<string>("ShortFormattedAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Takeout")
                        .HasColumnType("bit");

                    b.Property<string>("Types")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserRatingCount")
                        .HasColumnType("int");

                    b.Property<int>("UtcOffsetMinutes")
                        .HasColumnType("int");

                    b.Property<string>("WebsiteUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressDescriptorId");

                    b.HasIndex("CurrentOpeningHoursId")
                        .IsUnique();

                    b.HasIndex("EditorialSummaryId")
                        .IsUnique();

                    b.HasIndex("PrimaryTypeDisplayNameId")
                        .IsUnique();

                    b.HasIndex("RegularOpeningHoursId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("Entities.Domain.Google.PlusCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompoundCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GlobalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlusCode");
                });

            modelBuilder.Entity("Entities.Domain.Google.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("Entities.Domain.Google.SubDestination", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("SubDestination");
                });

            modelBuilder.Entity("Entities.Domain.Google.Viewport", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NortheastId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SouthwestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SouthwestId")
                        .IsUnique();

                    b.ToTable("Viewport");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "04d687e1-cb75-4dde-a65b-018ae955914c",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Domain.Google.AddressComponent", b =>
                {
                    b.HasOne("Entities.Domain.Google.Place", "Place")
                        .WithMany("AddressComponents")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Place");
                });

            modelBuilder.Entity("Entities.Domain.Google.Attribution", b =>
                {
                    b.HasOne("Entities.Domain.Google.Place", "Place")
                        .WithMany("Attributions")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Place");
                });

            modelBuilder.Entity("Entities.Domain.Google.OpeningHours", b =>
                {
                    b.HasOne("Entities.Domain.Google.Place", null)
                        .WithMany("CurrentSecondaryOpeningHours")
                        .HasForeignKey("CurrentSecondaryOpeningHoursId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.Domain.Google.Place", null)
                        .WithMany("RegularSecondaryOpeningHours")
                        .HasForeignKey("RegularSecondaryOpeningHoursId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Entities.Domain.Google.Photo", b =>
                {
                    b.HasOne("Entities.Domain.Google.Place", "Place")
                        .WithMany("Photos")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Place");
                });

            modelBuilder.Entity("Entities.Domain.Google.Place", b =>
                {
                    b.HasOne("Entities.Domain.Google.AddressDescriptor", "AddressDescriptor")
                        .WithMany()
                        .HasForeignKey("AddressDescriptorId");

                    b.HasOne("Entities.Domain.Google.OpeningHours", "CurrentOpeningHours")
                        .WithOne()
                        .HasForeignKey("Entities.Domain.Google.Place", "CurrentOpeningHoursId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Domain.Google.LocalizedText", "EditorialSummary")
                        .WithOne()
                        .HasForeignKey("Entities.Domain.Google.Place", "EditorialSummaryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Domain.Google.AccessibilityOptions", "AccessibilityOptions")
                        .WithOne()
                        .HasForeignKey("Entities.Domain.Google.Place", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Domain.Google.AreaSummary", "AreaSummary")
                        .WithOne()
                        .HasForeignKey("Entities.Domain.Google.Place", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Domain.Google.EVChargeOptions", "EvChargeOptions")
                        .WithOne()
                        .HasForeignKey("Entities.Domain.Google.Place", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Domain.Google.FuelOptions", "FuelOptions")
                        .WithOne()
                        .HasForeignKey("Entities.Domain.Google.Place", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Domain.Google.GenerativeSummary", "GenerativeSummary")
                        .WithOne()
                        .HasForeignKey("Entities.Domain.Google.Place", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Domain.Google.LatLng", "Location")
                        .WithOne()
                        .HasForeignKey("Entities.Domain.Google.Place", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Domain.Google.LocalizedText", "DisplayName")
                        .WithOne()
                        .HasForeignKey("Entities.Domain.Google.Place", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Domain.Google.ParkingOptions", "ParkingOptions")
                        .WithOne("Place")
                        .HasForeignKey("Entities.Domain.Google.Place", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Domain.Google.PaymentOptions", "PaymentOptions")
                        .WithOne("Place")
                        .HasForeignKey("Entities.Domain.Google.Place", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Domain.Google.PlusCode", "PlusCode")
                        .WithOne()
                        .HasForeignKey("Entities.Domain.Google.Place", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Domain.Google.Viewport", "Viewport")
                        .WithOne()
                        .HasForeignKey("Entities.Domain.Google.Place", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Domain.Google.LocalizedText", "PrimaryTypeDisplayName")
                        .WithOne()
                        .HasForeignKey("Entities.Domain.Google.Place", "PrimaryTypeDisplayNameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Domain.Google.OpeningHours", "RegularOpeningHours")
                        .WithOne()
                        .HasForeignKey("Entities.Domain.Google.Place", "RegularOpeningHoursId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Domain.Auth.User", null)
                        .WithMany("FavoritePlaces")
                        .HasForeignKey("UserId");

                    b.Navigation("AccessibilityOptions");

                    b.Navigation("AddressDescriptor");

                    b.Navigation("AreaSummary");

                    b.Navigation("CurrentOpeningHours");

                    b.Navigation("DisplayName");

                    b.Navigation("EditorialSummary");

                    b.Navigation("EvChargeOptions");

                    b.Navigation("FuelOptions");

                    b.Navigation("GenerativeSummary");

                    b.Navigation("Location");

                    b.Navigation("ParkingOptions");

                    b.Navigation("PaymentOptions");

                    b.Navigation("PlusCode");

                    b.Navigation("PrimaryTypeDisplayName");

                    b.Navigation("RegularOpeningHours");

                    b.Navigation("Viewport");
                });

            modelBuilder.Entity("Entities.Domain.Google.Review", b =>
                {
                    b.HasOne("Entities.Domain.Google.Place", "Place")
                        .WithMany("Reviews")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Place");
                });

            modelBuilder.Entity("Entities.Domain.Google.SubDestination", b =>
                {
                    b.HasOne("Entities.Domain.Google.LatLng", "Location")
                        .WithOne()
                        .HasForeignKey("Entities.Domain.Google.SubDestination", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Domain.Google.Place", "Place")
                        .WithMany("SubDestinations")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Location");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("Entities.Domain.Google.Viewport", b =>
                {
                    b.HasOne("Entities.Domain.Google.LatLng", "Northeast")
                        .WithOne()
                        .HasForeignKey("Entities.Domain.Google.Viewport", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Domain.Google.LatLng", "Southwest")
                        .WithOne()
                        .HasForeignKey("Entities.Domain.Google.Viewport", "SouthwestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Northeast");

                    b.Navigation("Southwest");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Domain.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Domain.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Domain.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Domain.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Domain.Auth.User", b =>
                {
                    b.Navigation("FavoritePlaces");
                });

            modelBuilder.Entity("Entities.Domain.Google.ParkingOptions", b =>
                {
                    b.Navigation("Place");
                });

            modelBuilder.Entity("Entities.Domain.Google.PaymentOptions", b =>
                {
                    b.Navigation("Place");
                });

            modelBuilder.Entity("Entities.Domain.Google.Place", b =>
                {
                    b.Navigation("AddressComponents");

                    b.Navigation("Attributions");

                    b.Navigation("CurrentSecondaryOpeningHours");

                    b.Navigation("Photos");

                    b.Navigation("RegularSecondaryOpeningHours");

                    b.Navigation("Reviews");

                    b.Navigation("SubDestinations");
                });
#pragma warning restore 612, 618
        }
    }
}
